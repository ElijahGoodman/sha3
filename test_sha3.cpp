/* 
 * test_sha3.cpp
 * 2022 Copyright © by Elijah Coleman
 */

//==============================================================================

#include "sha3_ec.h"

#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <string>
#include <vector>
#include <map>
#include <bitset>
#include <fstream>
#include <algorithm>
#include <exception>
#include <iterator>

//==============================================================================
//=== FACILITIES ===
//==============================================================================


//==============================================================================
int main(int, char* [])
{
	std::cout << "Check connection...\n";

	//std::cout << std::hex << (0x00000000000000FF << 8) << " " << (0x00000000000000FF << 16);


	// Input data -- hexadecimal strings
	std::map<int, std::string> input_strings {
		{0, ""},				// MSG 0 bit
		{5, ""},				// MSG 5 bits
		{30, "SX{"},		// MSG 30 bits

		// MSG 1600 bits
		{1600, "£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
££££££££££££££££££££££££££££££££££££££££££££££££££££££££££"},
		// MSG 1605 bits
		{1605, "£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
££££££££££££££££££££££££££££££££££££££££££££££££££££££££££"},
		// MSG 1630 bits
		{1630, "£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££#"},
//		{344, "The quick brown fox jumps over the lazy dog"},
//		{352, "The quick brown fox jumps over the lazy dog."},
/*
		// MSG 1088 bits
		{1088, "£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££"},
		// MSG 1087 bits
		{1087, "£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££#"},
		// MSG 1086 bits
		{1086, "£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££#"},
		// MSG 1085 bits
		{1085, "£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££"},
		// MSG 1084 bits
		{1084, "£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££"},
		// MSG 1083 bits
		{1083, "£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££"}
*/		
	};

	//chash::SHA3_256 obj;	// SHA3-256
	//chash::SHA3_512 obj;
	chash::SHAKE128 obj;
	obj.set_digest_size(4096);

	std::cout << "SHA3-256" << "\n\n";

	for(const std::pair<int, std::string> &input_str : input_strings) {
		//std::string input_str = input_strings[1630];
	 	std::cout << "-------------------\n";
		std::cout << "Input data (message length = " << std::dec
				<< input_str.first << "):\n" << input_str.second << "\n";
		//std::cout << "Input data: " << input_str << "\n\n";
		
		auto md = obj.get_digest(input_str.second, input_str.first);

		int i = 0;
		std::cout << "Message digest:\n" << std::hex;
		for(const auto c : md) {
			std::cout << std::setw(2) << std::setfill('0') << std::uppercase
					  << (int)c << " ";
			if(!((i+1)%16))
						std::cout << '\n';
			i++;
		}
		std::cout << "\n";
	}

	std::cout << "\n-------------------\n" << "End.\n";
	return(0);
}

//==============================================================================

