/* 
 * test_sha3.cpp
 * 2022 Copyright © by Elijah Coleman
 */

//==============================================================================

#include "sha3_ec.h"

#include <iostream>
#include <string>
#include <vector>

//-----------------------------------------------------------------------------
std::ostream& operator<<(std::ostream& out, const std::vector<chash::byte>& obj)
{
    out << std::hex;
    out.fill('0');
    for(size_t i = 0; i < obj.size(); i++) {
        out << std::setw(2) << static_cast<int>(obj[i]);
    }
    out << std::flush << std::dec;
    return (out);
}

//-----------------------------------------------------------------------------
bool compare_byte_vectors(std::vector<chash::byte> &vec1,
                          std::vector<chash::byte> &&vec2)
{
    if(vec1.size() != vec2.size())
        return (false);
    for(chash::size_t i = 0; i < vec1.size(); i++)
        if(vec1[i] != vec2[i])
            return (false);
    return (true);
} // end compare_byte_vectors(...)

//-----------------------------------------------------------------------------
void sha3_self_test() // Some simple tests
{
    const std::vector<std::string> input_str = {
        "",         // length = 0
        "SX{",     // length = 30
        "£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
££££££££££££££££££££££££££££££££££££££££££££££££££££££££",  // length = 1600
        "£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
£££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££££\
££££££££££££££££££££££££££££££££££££££££££££££££££££££££", // length = 1605
        "The quick brown fox jumps over the lazy dog.",     // length = 44 * 8
    };

    const chash::size_t str_len [] = { 0, 30, 1600, 1605, 352 };

    std::vector<std::vector<chash::byte>> hash_224 = {
        {0x6B, 0x4E, 0x03, 0x42, 0x36, 0x67, 0xDB, 0xB7, 0x3B, 0x6E, 0x15, 0x45, 0x4F, 0x0E, 0xB1, 0xAB,
         0xD4, 0x59, 0x7F, 0x9A, 0x1B, 0x07, 0x8E, 0x3F, 0x5B, 0x5A, 0x6B, 0xC7},
        {0xD6, 0x66, 0xA5, 0x14, 0xCC, 0x9D, 0xBA, 0x25, 0xAC, 0x1B, 0xA6, 0x9E, 0xD3, 0x93, 0x04, 0x60,
         0xDE, 0xAA, 0xC9, 0x85, 0x1B, 0x5F, 0x0B, 0xAA, 0xB0, 0x07, 0xDF, 0x3B},
        {0x93, 0x76, 0x81, 0x6A, 0xBA, 0x50, 0x3F, 0x72, 0xF9, 0x6C, 0xE7, 0xEB, 0x65, 0xAC, 0x09, 0x5D,
         0xEE, 0xE3, 0xBE, 0x4B, 0xF9, 0xBB, 0xC2, 0xA1, 0xCB, 0x7E, 0x11, 0xE0},
        {0x22, 0xD2, 0xF7, 0xBB, 0x0B, 0x17, 0x3F, 0xD8, 0xC1, 0x96, 0x86, 0xF9, 0x17, 0x31, 0x66, 0xE3,
         0xEE, 0x62, 0x73, 0x80, 0x47, 0xD7, 0xEA, 0xDD, 0x69, 0xEF, 0xB2, 0x28},
        {0x2D, 0x07, 0x08, 0x90, 0x38, 0x33, 0xAF, 0xAB, 0xDD, 0x23, 0x2A, 0x20, 0x20, 0x11, 0x76, 0xE8,
         0xB5, 0x8C, 0x5B, 0xE8, 0xA6, 0xFE, 0x74, 0x26, 0x5A, 0xC5, 0x4D, 0xB0}
    }; // end hash_224

    std::vector<std::vector<chash::byte>> hash_256 = {
        {0xA7, 0xFF, 0xC6, 0xF8, 0xBF, 0x1E, 0xD7, 0x66, 0x51, 0xC1, 0x47, 0x56, 0xA0, 0x61, 0xD6, 0x62,
         0xF5, 0x80, 0xFF, 0x4D, 0xE4, 0x3B, 0x49, 0xFA, 0x82, 0xD8, 0x0A, 0x4B, 0x80, 0xF8, 0x43, 0x4A},
        {0xC8, 0x24, 0x2F, 0xEF, 0x40, 0x9E, 0x5A, 0xE9, 0xD1, 0xF1, 0xC8, 0x57, 0xAE, 0x4D, 0xC6, 0x24,
         0xB9, 0x2B, 0x19, 0x80, 0x9F, 0x62, 0xAA, 0x8C, 0x07, 0x41, 0x1C, 0x54, 0xA0, 0x78, 0xB1, 0xD0},
        {0x79, 0xF3, 0x8A, 0xDE, 0xC5, 0xC2, 0x03, 0x07, 0xA9, 0x8E, 0xF7, 0x6E, 0x83, 0x24, 0xAF, 0xBF,
         0xD4, 0x6C, 0xFD, 0x81, 0xB2, 0x2E, 0x39, 0x73, 0xC6, 0x5F, 0xA1, 0xBD, 0x9D, 0xE3, 0x17, 0x87},
        {0x81, 0xEE, 0x76, 0x9B, 0xED, 0x09, 0x50, 0x86, 0x2B, 0x1D, 0xDD, 0xED, 0x2E, 0x84, 0xAA, 0xA6,
         0xAB, 0x7B, 0xFD, 0xD3, 0xCE, 0xAA, 0x47, 0x1B, 0xE3, 0x11, 0x63, 0xD4, 0x03, 0x36, 0x36, 0x3C},
        {0xA8, 0x0F, 0x83, 0x9C, 0xD4, 0xF8, 0x3F, 0x6C, 0x3D, 0xAF, 0xC8, 0x7F, 0xEA, 0xE4, 0x70, 0x04,
         0x5E, 0x4E, 0xB0, 0xD3, 0x66, 0x39, 0x7D, 0x5C, 0x6C, 0xE3, 0x4B, 0xA1, 0x73, 0x9F, 0x73, 0x4D}
    }; // end hash_256

    std::vector<std::vector<chash::byte>> hash_384 = {
        {0x0C, 0x63, 0xA7, 0x5B, 0x84, 0x5E, 0x4F, 0x7D, 0x01, 0x10, 0x7D, 0x85, 0x2E, 0x4C, 0x24, 0x85,
         0xC5, 0x1A, 0x50, 0xAA, 0xAA, 0x94, 0xFC, 0x61, 0x99, 0x5E, 0x71, 0xBB, 0xEE, 0x98, 0x3A, 0x2A,
         0xC3, 0x71, 0x38, 0x31, 0x26, 0x4A, 0xDB, 0x47, 0xFB, 0x6B, 0xD1, 0xE0, 0x58, 0xD5, 0xF0, 0x04},
        {0x95, 0x5B, 0x4D, 0xD1, 0xBE, 0x03, 0x26, 0x1B, 0xD7, 0x6F, 0x80, 0x7A, 0x7E, 0xFD, 0x43, 0x24,
         0x35, 0xC4, 0x17, 0x36, 0x28, 0x11, 0xB8, 0xA5, 0x0C, 0x56, 0x4E, 0x7E, 0xE9, 0x58, 0x5E, 0x1A,
         0xC7, 0x62, 0x6D, 0xDE, 0x2F, 0xDC, 0x03, 0x0F, 0x87, 0x61, 0x96, 0xEA, 0x26, 0x7F, 0x08, 0xC3},
        {0x18, 0x81, 0xDE, 0x2C, 0xA7, 0xE4, 0x1E, 0xF9, 0x5D, 0xC4, 0x73, 0x2B, 0x8F, 0x5F, 0x00, 0x2B,
         0x18, 0x9C, 0xC1, 0xE4, 0x2B, 0x74, 0x16, 0x8E, 0xD1, 0x73, 0x26, 0x49, 0xCE, 0x1D, 0xBC, 0xDD,
         0x76, 0x19, 0x7A, 0x31, 0xFD, 0x55, 0xEE, 0x98, 0x9F, 0x2D, 0x70, 0x50, 0xDD, 0x47, 0x3E, 0x8F},
        {0xA3, 0x1F, 0xDB, 0xD8, 0xD5, 0x76, 0x55, 0x1C, 0x21, 0xFB, 0x11, 0x91, 0xB5, 0x4B, 0xDA, 0x65,
         0xB6, 0xC5, 0xFE, 0x97, 0xF0, 0xF4, 0xA6, 0x91, 0x03, 0x42, 0x4B, 0x43, 0xF7, 0xFD, 0xB8, 0x35,
         0x97, 0x9F, 0xDB, 0xEA, 0xE8, 0xB3, 0xFE, 0x16, 0xCB, 0x82, 0xE5, 0x87, 0x38, 0x1E, 0xB6, 0x24},
        {0x1A, 0x34, 0xD8, 0x16, 0x95, 0xB6, 0x22, 0xDF, 0x17, 0x8B, 0xC7, 0x4D, 0xF7, 0x12, 0x4F, 0xE1,
         0x2F, 0xAC, 0x0F, 0x64, 0xBA, 0x52, 0x50, 0xB7, 0x8B, 0x99, 0xC1, 0x27, 0x3D, 0x4B, 0x08, 0x01,
         0x68, 0xE1, 0x06, 0x52, 0x89, 0x4E, 0xCA, 0xD5, 0xF1, 0xF4, 0xD5, 0xB9, 0x65, 0x43, 0x7F, 0xB9}
    }; // end hash_384

    std::vector<std::vector<chash::byte>> hash_512 = {
        {0xA6, 0x9F, 0x73, 0xCC, 0xA2, 0x3A, 0x9A, 0xC5, 0xC8, 0xB5, 0x67, 0xDC, 0x18, 0x5A, 0x75, 0x6E,
         0x97, 0xC9, 0x82, 0x16, 0x4F, 0xE2, 0x58, 0x59, 0xE0, 0xD1, 0xDC, 0xC1, 0x47, 0x5C, 0x80, 0xA6,
         0x15, 0xB2, 0x12, 0x3A, 0xF1, 0xF5, 0xF9, 0x4C, 0x11, 0xE3, 0xE9, 0x40, 0x2C, 0x3A, 0xC5, 0x58,
         0xF5, 0x00, 0x19, 0x9D, 0x95, 0xB6, 0xD3, 0xE3, 0x01, 0x75, 0x85, 0x86, 0x28, 0x1D, 0xCD, 0x26},
        {0x98, 0x34, 0xC0, 0x5A, 0x11, 0xE1, 0xC5, 0xD3, 0xDA, 0x9C, 0x74, 0x0E, 0x1C, 0x10, 0x6D, 0x9E,
         0x59, 0x0A, 0x0E, 0x53, 0x0B, 0x6F, 0x6A, 0xAA, 0x78, 0x30, 0x52, 0x5D, 0x07, 0x5C, 0xA5, 0xDB,
         0x1B, 0xD8, 0xA6, 0xAA, 0x98, 0x1A, 0x28, 0x61, 0x3A, 0xC3, 0x34, 0x93, 0x4A, 0x01, 0x82, 0x3C,
         0xD4, 0x5F, 0x45, 0xE4, 0x9B, 0x6D, 0x7E, 0x69, 0x17, 0xF2, 0xF1, 0x67, 0x78, 0x06, 0x7B, 0xAB},
        {0xE7, 0x6D, 0xFA, 0xD2, 0x20, 0x84, 0xA8, 0xB1, 0x46, 0x7F, 0xCF, 0x2F, 0xFA, 0x58, 0x36, 0x1B,
         0xEC, 0x76, 0x28, 0xED, 0xF5, 0xF3, 0xFD, 0xC0, 0xE4, 0x80, 0x5D, 0xC4, 0x8C, 0xAE, 0xEC, 0xA8,
         0x1B, 0x7C, 0x13, 0xC3, 0x0A, 0xDF, 0x52, 0xA3, 0x65, 0x95, 0x84, 0x73, 0x9A, 0x2D, 0xF4, 0x6B,
         0xE5, 0x89, 0xC5, 0x1C, 0xA1, 0xA4, 0xA8, 0x41, 0x6D, 0xF6, 0x54, 0x5A, 0x1C, 0xE8, 0xBA, 0x00},
        {0xFC, 0x4A, 0x16, 0x7C, 0xCB, 0x31, 0xA9, 0x37, 0xD6, 0x98, 0xFD, 0xE8, 0x2B, 0x04, 0x34, 0x8C,
         0x95, 0x39, 0xB2, 0x8F, 0x0C, 0x9D, 0x3B, 0x45, 0x05, 0x70, 0x9C, 0x03, 0x81, 0x23, 0x50, 0xE4,
         0x99, 0x0E, 0x96, 0x22, 0x97, 0x4F, 0x6E, 0x57, 0x5C, 0x47, 0x86, 0x1C, 0x0D, 0x2E, 0x63, 0x8C,
         0xCF, 0xC2, 0x02, 0x3C, 0x36, 0x5B, 0xB6, 0x0A, 0x93, 0xF5, 0x28, 0x55, 0x06, 0x98, 0x78, 0x6B},
        {0x18, 0xF4, 0xF4, 0xBD, 0x41, 0x96, 0x03, 0xF9, 0x55, 0x38, 0x83, 0x70, 0x03, 0xD9, 0xD2, 0x54,
         0xC2, 0x6C, 0x23, 0x76, 0x55, 0x65, 0x16, 0x22, 0x47, 0x48, 0x3F, 0x65, 0xC5, 0x03, 0x03, 0x59,
         0x7B, 0xC9, 0xCE, 0x4D, 0x28, 0x9F, 0x21, 0xD1, 0xC2, 0xF1, 0xF4, 0x58, 0x82, 0x8E, 0x33, 0xDC,
         0x44, 0x21, 0x00, 0x33, 0x1B, 0x35, 0xE7, 0xEB, 0x03, 0x1B, 0x5D, 0x38, 0xBA, 0x64, 0x60, 0xF8}
    }; // end hash_512

    std::vector<std::vector<chash::byte>> hash_shake128 = { // for hash 256 bits
        {0x7F, 0x9C, 0x2B, 0xA4, 0xE8, 0x8F, 0x82, 0x7D, 0x61, 0x60, 0x45, 0x50, 0x76, 0x05, 0x85, 0x3E,
         0xD7, 0x3B, 0x80, 0x93, 0xF6, 0xEF, 0xBC, 0x88, 0xEB, 0x1A, 0x6E, 0xAC, 0xFA, 0x66, 0xEF, 0x26},
        {0x6D, 0x5D, 0x39, 0xC5, 0x5F, 0x3C, 0xCA, 0x56, 0x7F, 0xEA, 0xF4, 0x22, 0xDC, 0x64, 0xBA, 0x17,
         0x40, 0x1D, 0x07, 0x75, 0x6D, 0x78, 0xB0, 0xFA, 0x3D, 0x54, 0x6D, 0x66, 0xAF, 0xC2, 0x76, 0x71},
        {0x13, 0x1A, 0xB8, 0xD2, 0xB5, 0x94, 0x94, 0x6B, 0x9C, 0x81, 0x33, 0x3F, 0x9B, 0xB6, 0xE0, 0xCE,
         0x75, 0xC3, 0xB9, 0x31, 0x04, 0xFA, 0x34, 0x69, 0xD3, 0x91, 0x74, 0x57, 0x38, 0x5D, 0xA0, 0x37},
        {0x4A, 0xC3, 0x8E, 0xBD, 0x16, 0x78, 0xB4, 0xA4, 0x52, 0x79, 0x2C, 0x56, 0x73, 0xF9, 0x77, 0x7D,
         0x36, 0xB5, 0x54, 0x51, 0xAA, 0xAE, 0x24, 0x24, 0x92, 0x49, 0x42, 0xD3, 0x18, 0xA2, 0xF6, 0xF5},
        {0x63, 0x40, 0x69, 0xE6, 0xB1, 0x3C, 0x3A, 0xF6, 0x4C, 0x57, 0xF0, 0x5B, 0xAB, 0xF5, 0x91, 0x1B,
         0x6A, 0xCF, 0x1D, 0x30, 0x9B, 0x96, 0x24, 0xFC, 0x92, 0xB0, 0xC0, 0xBD, 0x9F, 0x27, 0xF5, 0x38}
    }; // end hash_shake128

    std::vector<std::vector<chash::byte>> hash_shake256 = { // for hash 512 bits
        {0x46, 0xB9, 0xDD, 0x2B, 0x0B, 0xA8, 0x8D, 0x13, 0x23, 0x3B, 0x3F, 0xEB, 0x74, 0x3E, 0xEB, 0x24,
         0x3F, 0xCD, 0x52, 0xEA, 0x62, 0xB8, 0x1B, 0x82, 0xB5, 0x0C, 0x27, 0x64, 0x6E, 0xD5, 0x76, 0x2F,
         0xD7, 0x5D, 0xC4, 0xDD, 0xD8, 0xC0, 0xF2, 0x00, 0xCB, 0x05, 0x01, 0x9D, 0x67, 0xB5, 0x92, 0xF6,
         0xFC, 0x82, 0x1C, 0x49, 0x47, 0x9A, 0xB4, 0x86, 0x40, 0x29, 0x2E, 0xAC, 0xB3, 0xB7, 0xC4, 0xBE},
        {0x46, 0x5D, 0x08, 0x1D, 0xFF, 0x87, 0x5E, 0x39, 0x62, 0x00, 0xE4, 0x48, 0x1A, 0x3E, 0x9D, 0xCD,
         0x88, 0xD0, 0x79, 0xAA, 0x6D, 0x66, 0x22, 0x6C, 0xB6, 0xBA, 0x45, 0x41, 0x07, 0xCB, 0x81, 0xA7,
         0x84, 0x1A, 0xB0, 0x29, 0x60, 0xDE, 0x27, 0x9C, 0xCB, 0xE3, 0x4B, 0x42, 0xC3, 0x65, 0x85, 0xAD,
         0x86, 0x96, 0x4D, 0xB0, 0xDB, 0x52, 0xB6, 0xE7, 0xB4, 0x36, 0x9E, 0xCE, 0x8F, 0x72, 0x48, 0x58},
        {0xCD, 0x8A, 0x92, 0x0E, 0xD1, 0x41, 0xAA, 0x04, 0x07, 0xA2, 0x2D, 0x59, 0x28, 0x86, 0x52, 0xE9,
         0xD9, 0xF1, 0xA7, 0xEE, 0x0C, 0x1E, 0x7C, 0x1C, 0xA6, 0x99, 0x42, 0x4D, 0xA8, 0x4A, 0x90, 0x4D,
         0x2D, 0x70, 0x0C, 0xAA, 0xE7, 0x39, 0x6E, 0xCE, 0x96, 0x60, 0x44, 0x40, 0x57, 0x7D, 0xA4, 0xF3,
         0xAA, 0x22, 0xAE, 0xB8, 0x85, 0x7F, 0x96, 0x1C, 0x4C, 0xD8, 0xE0, 0x6F, 0x0A, 0xE6, 0x61, 0x0B},
        {0x98, 0xD0, 0x93, 0xB0, 0x67, 0x47, 0x57, 0x60, 0x12, 0x4F, 0xFB, 0x92, 0x04, 0xA5, 0xB3, 0x27,
         0xC6, 0xBB, 0x05, 0xC5, 0x4F, 0xF2, 0x34, 0xF0, 0xB4, 0x3F, 0xAC, 0x72, 0x40, 0x41, 0x51, 0x66,
         0xA8, 0xC7, 0x05, 0xEA, 0x0D, 0x73, 0x9F, 0x08, 0x08, 0xB0, 0x65, 0x76, 0xD9, 0x96, 0x66, 0x2C,
         0x1F, 0x37, 0x66, 0x94, 0xD9, 0x8F, 0x51, 0x57, 0x19, 0xB6, 0x64, 0x07, 0x72, 0x0D, 0xCF, 0x78},
        {0xBD, 0x22, 0x5B, 0xFC, 0x8B, 0x25, 0x5F, 0x30, 0x36, 0xF0, 0xC8, 0x86, 0x60, 0x10, 0xED, 0x00,
         0x53, 0xB5, 0x16, 0x3A, 0x3C, 0xAE, 0x11, 0x1E, 0x72, 0x3C, 0x0C, 0x8E, 0x70, 0x4E, 0xCA, 0x4E,
         0x5D, 0x0F, 0x1E, 0x2A, 0x2F, 0xA1, 0x8C, 0x8A, 0x21, 0x9D, 0xE6, 0xB8, 0x8D, 0x59, 0x17, 0xFF,
         0x5D, 0xD7, 0x5B, 0x5F, 0xB3, 0x45, 0xE7, 0x40, 0x9A, 0x3B, 0x33, 0x3B, 0x50, 0x8A, 0x65, 0xFB}
    }; // end hash_shake256

    {   // test for sha3_224
        chash::SHA3_IUF obj(chash::kSHA3_224);
        std::cout << "\nTest for " << obj.get_hash_type() << ":\n";
        for(size_t i = 0; i < input_str.size(); i++) {
            std::cout << "  string " << str_len[i] << " bit: ";
            bool res = compare_byte_vectors(hash_224[i], obj.get_digest(input_str[i], str_len[i]));
            if (res)
                std::cout << "OK\n";
            else
                std::cout << "Fail";
        }
    } // end test for sha3_224

    {   // test for sha3_256
        chash::SHA3_IUF obj(chash::kSHA3_256);
        std::cout << "\nTest for " << obj.get_hash_type() << ":\n";
        for(size_t i = 0; i < input_str.size(); i++) {
            std::cout << "  string " << str_len[i] << " bit: ";
            bool res = compare_byte_vectors(hash_256[i], obj.get_digest(input_str[i], str_len[i]));
            if (res)
                std::cout << "OK.\n";
            else
                std::cout << "FAIL!\n";
        }
    } // end test for sha3_256

    {   // test for sha3_384
        chash::SHA3_IUF obj(chash::kSHA3_384);
        std::cout << "\nTest for " << obj.get_hash_type() << ":\n";
        for(size_t i = 0; i < input_str.size(); i++) {
            std::cout << "  string " << str_len[i] << " bit: ";
            bool res = compare_byte_vectors(hash_384[i], obj.get_digest(input_str[i], str_len[i]));
            if (res)
                std::cout << "OK.\n";
            else
                std::cout << "FAIL!\n";
        }
    } // end test for sha3_384

    {   // test for sha3_512
        chash::SHA3_IUF obj(chash::kSHA3_512);
        std::cout << "\nTest for " << obj.get_hash_type() << ":\n";
        for(size_t i = 0; i < input_str.size(); i++) {
            std::cout << "  string " << str_len[i] << " bit: ";
            bool res = compare_byte_vectors(hash_512[i], obj.get_digest(input_str[i], str_len[i]));
            if (res)
                std::cout << "OK.\n";
            else
                std::cout << "FAIL!\n";
        }
    } // end test for sha3_512

    {   // test for shake128 (digest length 256 bits)
        chash::SHA3_IUF obj(chash::kSHAKE128);
        obj.set_digest_size(256);
        std::cout << "\nTest for " << obj.get_hash_type() << ":\n";
        for(size_t i = 0; i < input_str.size(); i++) {
            std::cout << "  string " << str_len[i] << " bit: ";
            bool res = compare_byte_vectors(hash_shake128[i], obj.get_digest(input_str[i], str_len[i]));
            if (res)
                std::cout << "OK.\n";
            else
                std::cout << "FAIL!\n";
        }
    } // end test for shake128

    {   // test for shake256 (digest length 512 bits)
        chash::SHA3_IUF obj(chash::kSHAKE256);
        obj.set_digest_size(512);
        std::cout << "\nTest for " << obj.get_hash_type() << ":\n";
        for(size_t i = 0; i < input_str.size(); i++) {
            std::cout << "  string " << str_len[i] << " bit: ";
            bool res = compare_byte_vectors(hash_shake256[i], obj.get_digest(input_str[i], str_len[i]));
            if (res)
                std::cout << "OK.\n";
            else
                std::cout << "FAIL!\n";
        }
    } // end test for shake256

    {   // additional tests (SHA3-224 for example)
        std::string str = input_str[4]; // "The quick brown fox jumps over the lazy dog."
        chash::SHA3_IUF obj(chash::kSHA3_224);

        std::cout << "\nAdditional tests (" << obj.get_hash_type() << "):"
                << "\n  Message(" << str.length() << " bytes): \"" << str
                << "\n  Digest = " << std::uppercase << hash_224[4] << std::nouppercase;


        std::cout << "\n  1) get_digest(string): " << obj.get_digest(str, str.length()*8);

        std::cout << "\n  2) get_digest(const char*): " << obj.get_digest(str.c_str(), str.length()*8);

        std::cout << "\n  3) Init/Update/Finalize: ";
        obj.init();
        std::cout << "\n    update " << obj.update(str.c_str(), 1) << " bytes";               // 1  (+1)
        std::cout << "\n    update " << obj.update_fast(str.c_str()+1, 2) << " bytes";          // 3  (+2)
        std::cout << "\n    update " << obj.update(str.begin()+3, str.begin()+13) << " bytes";  // 13 (+10)
        std::cout << "\n    update " << obj.update_fast(str.c_str()+13, 13) << " bytes";        // 26 (+13)
        std::cout << "\n    update " << obj.update(str.begin()+26, str.end()) << " bytes";      // to end
        std::cout << "\n    " << obj << std::endl;
    } // end additional tests

    {   // Error & bad cases handling (SHA3-256 for example)
        std::string str = "";
        chash::SHA3_IUF obj(chash::kSHA3_256);
        obj.init();
        try {
            //obj.update(nullptr); // Runtime error! basic_string::_M_construct null not valid
            //std::cout << obj.get_digest(nullptr, 123) << "\n"; // empty vector
            obj.update_fast(nullptr, 0);        // 0
            obj.update(nullptr, 12);            // 0
            obj.update(str.c_str(), 0);         // 0
            //obj.update(str.c_str(), 12);      // Logical error! Incorrect string size
            obj.update_fast(str.c_str(), 0);    // 0
        }
        catch(std::exception &ex) {
            std::cerr << "An error occurred: " << ex.what() << std::endl;
        }
        catch(...) {
            std::cout << "Oops! Something goes wrong!" << std::endl;
        }
        std::cout << "\nIs hash of empty string correct?: " << std::boolalpha
                  << compare_byte_vectors(hash_256[0], obj.finalize()) << std::endl;
    } // end Error & bad cases handling

} // end seft_test()

//==============================================================================
int main(int, char* [])
{
	std::cout << "Check connection...\n";
	// ----------------------------------
	sha3_self_test();
	// -----------------------------------
	std::cout << "\nEnd.\n";
	return(0);
}

//==============================================================================
